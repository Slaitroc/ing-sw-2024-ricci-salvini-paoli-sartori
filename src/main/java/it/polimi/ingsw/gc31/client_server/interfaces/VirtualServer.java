package it.polimi.ingsw.gc31.client_server.interfaces;

import it.polimi.ingsw.gc31.client_server.queue.clientQueue.ClientQueueObject;
import it.polimi.ingsw.gc31.client_server.queue.serverQueue.ServerQueueObject;

import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.server.RemoteServer;

/**
 * Defines the methods that the {@link it.polimi.ingsw.gc31.client_server.rmi.RmiServer} should implement.
 * Extends the {@link Remote} interface.
 */
public interface VirtualServer extends Remote {
    /**
     * Writes a specific String with a formatted prefix indicating the {@link it.polimi.ingsw.gc31.client_server.rmi.RmiServer}.
     * The format is done by the {@link it.polimi.ingsw.gc31.client_server.log.ServerLog#rmiWrite(String)} method.
     *
     * @param                   text is the String to write.
     * @throws RemoteException  if an error occurs during the remote method call.
     */
    public void RMIserverWrite(String text) throws RemoteException;

    /**
     * This method adds to the {@link it.polimi.ingsw.gc31.client_server.rmi.RmiServer} the {@link ServerQueueObject}
     * received as a parameter. Periodically a poll is executed on the list by the private method executor
     * and the {@link ServerQueueObject} is executed.
     * This method is invoked only by the {@link it.polimi.ingsw.gc31.client_server.rmi.RmiClient#setUsernameCall(String)} method.
     *
     * @param                   obj is the {@link ServerQueueObject} that needs to be added in the List of the {@link it.polimi.ingsw.gc31.client_server.rmi.RmiServer}.
     * @throws RemoteException  if an error occurs during the remote method call.
     */
    public void sendCommand(ServerQueueObject obj) throws RemoteException;

//    public void setVirtualClient(VirtualClient client) throws RemoteException;

    /**
     * Finds and return the IP of the {@link VirtualClient}. If the {@link RemoteServer#getClientHost()} method
     * fail a {@link java.rmi.server.ServerNotActiveException} is caught.
     *
     * @return                  the IP value if the {@link RemoteServer#getClientHost()} method is able to find it.
     * @throws RemoteException  if an error occurs during the remote method call.
     */
    public String getClientIP() throws RemoteException;

    /**
     * Invokes the {@link it.polimi.ingsw.gc31.controller.Controller#generateToken(VirtualClient)} method.
     * The value of the token generated by the {@link it.polimi.ingsw.gc31.controller.Controller} is returned.
     * Is invoked only by the {@link it.polimi.ingsw.gc31.client_server.rmi.RmiClient#RmiClient(String)} method.
     *
     * @param client            is the reference to the {@link VirtualClient}
     * @return                  the value of the token generated by the {@link it.polimi.ingsw.gc31.controller.Controller}
     * @throws RemoteException  if an error occurs during the remote method call.
     */
    public int generateToken(VirtualClient client) throws RemoteException;

    /**
     * Invokes the {@link it.polimi.ingsw.gc31.controller.Controller#connect(VirtualClient, String, Integer, Integer)} method. Based on the
     * result of that method a boolean value is returned. If the {@link it.polimi.ingsw.gc31.controller.Controller#connect(VirtualClient, String, Integer, Integer)} method
     * terminates correctly the value returned is true, false otherwise.
     * Typically, the {@link it.polimi.ingsw.gc31.controller.Controller#connect(VirtualClient, String, Integer, Integer)} method return false
     * if the username of the user was already taken.
     *
     * @param client            is the reference of the {@link VirtualClient} that is trying to connect to the {@link it.polimi.ingsw.gc31.Server}.
     * @param username          is the username wanted by the user.
     * @param tempToken         is the value of the {@link it.polimi.ingsw.gc31.client_server.Token} tempToken private value.
     * @param token             is the value of the {@link it.polimi.ingsw.gc31.client_server.Token} token private value.
     * @return                  true if the {@link VirtualClient} is connected with the {@link it.polimi.ingsw.gc31.Server}, false otherwise
     * @throws RemoteException  if an error occurs during the remote method call.
     */
    public boolean connect(VirtualClient client, String username, Integer tempToken, Integer token)
            throws RemoteException;

    // TODO
//    public void setVirtualClient(VirtualClient client) throws RemoteException;
}
